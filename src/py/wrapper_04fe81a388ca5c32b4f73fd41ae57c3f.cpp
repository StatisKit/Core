#include "_core.h"


#if defined(_MSC_VER)
    #if (_MSC_VER == 1900)
namespace boost
{
    template <> class ::statiskit::GeneralizedStudentDistribution const volatile * get_pointer<class ::statiskit::GeneralizedStudentDistribution const volatile >(class ::statiskit::GeneralizedStudentDistribution const volatile *c) { return c; }
}
    #endif
#endif

namespace autowig
{

}


void wrapper_04fe81a388ca5c32b4f73fd41ae57c3f()
{

    std::string name_fa414b05d29e5f4ea0b6d6cb5cf81b01 = boost::python::extract< std::string >(boost::python::scope().attr("__name__") + ".statiskit");
    boost::python::object module_fa414b05d29e5f4ea0b6d6cb5cf81b01(boost::python::handle<  >(boost::python::borrowed(PyImport_AddModule(name_fa414b05d29e5f4ea0b6d6cb5cf81b01.c_str()))));
    boost::python::scope().attr("statiskit") = module_fa414b05d29e5f4ea0b6d6cb5cf81b01;
    boost::python::scope scope_fa414b05d29e5f4ea0b6d6cb5cf81b01 = module_fa414b05d29e5f4ea0b6d6cb5cf81b01;
    unsigned int  (::statiskit::GeneralizedStudentDistribution::*method_pointer_3254d53aac3e56529641ace04eabef03)() const = &::statiskit::GeneralizedStudentDistribution::get_nb_parameters;
    double const & (::statiskit::GeneralizedStudentDistribution::*method_pointer_4ff040a6e2f356f9a5db0723b5094bd9)() const = &::statiskit::GeneralizedStudentDistribution::get_mu;
    void  (::statiskit::GeneralizedStudentDistribution::*method_pointer_feeaf2ab063c5015b58521d4cfb5f66d)(double const &) = &::statiskit::GeneralizedStudentDistribution::set_mu;
    double const & (::statiskit::GeneralizedStudentDistribution::*method_pointer_c6421e0545bc57d3b191fb4f76ab7802)() const = &::statiskit::GeneralizedStudentDistribution::get_sigma;
    void  (::statiskit::GeneralizedStudentDistribution::*method_pointer_30a93d7aada658fab8adbceb8dfba048)(double const &) = &::statiskit::GeneralizedStudentDistribution::set_sigma;
    double const & (::statiskit::GeneralizedStudentDistribution::*method_pointer_468312cb3f5a5ec294ee2441d406363d)() const = &::statiskit::GeneralizedStudentDistribution::get_nu;
    void  (::statiskit::GeneralizedStudentDistribution::*method_pointer_fd6835a98dc8563380e04c09f2b012d0)(double const &) = &::statiskit::GeneralizedStudentDistribution::set_nu;
    double const & (::statiskit::GeneralizedStudentDistribution::*method_pointer_1a408c0e0c0158efa9ef5c40ae58379f)() const = &::statiskit::GeneralizedStudentDistribution::get_delta;
    void  (::statiskit::GeneralizedStudentDistribution::*method_pointer_38a5fd66e638522c87111a72614cc78d)(double const &) = &::statiskit::GeneralizedStudentDistribution::set_delta;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_5f3e0f2d46f954e08c69384bf1acfd8f)(double const &) const = &::statiskit::GeneralizedStudentDistribution::ldf;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_b3cde7308b2b54578d094df85f8a4509)(double const &) const = &::statiskit::GeneralizedStudentDistribution::pdf;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_2dc0b9876ed154819af4ddaaaa4ec054)(double const &) const = &::statiskit::GeneralizedStudentDistribution::cdf;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_0ecce8b496d25ac9858d2514c9a8d07d)(double const &) const = &::statiskit::GeneralizedStudentDistribution::quantile;
    class ::std::unique_ptr< struct ::statiskit::UnivariateEvent, struct ::std::default_delete< struct ::statiskit::UnivariateEvent > >  (::statiskit::GeneralizedStudentDistribution::*method_pointer_571aaf46ddea507db9dd6f30f1454fe0)() const = &::statiskit::GeneralizedStudentDistribution::simulate;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_fd540daa26e25807990d1992581827fc)() const = &::statiskit::GeneralizedStudentDistribution::get_mean;
    double  (::statiskit::GeneralizedStudentDistribution::*method_pointer_030a9d4a2f6059c18e6adc6679ba716b)() const = &::statiskit::GeneralizedStudentDistribution::get_variance;
    class ::std::unique_ptr< struct ::statiskit::UnivariateDistribution, struct ::std::default_delete< struct ::statiskit::UnivariateDistribution > >  (::statiskit::GeneralizedStudentDistribution::*method_pointer_fa5bf3ce7fb35a92a77d8f5199de2318)() const = &::statiskit::GeneralizedStudentDistribution::copy;
    boost::python::class_< class ::statiskit::GeneralizedStudentDistribution, autowig::Held< class ::statiskit::GeneralizedStudentDistribution >::Type, boost::python::bases< struct ::statiskit::ContinuousUnivariateDistribution > > class_04fe81a388ca5c32b4f73fd41ae57c3f("GeneralizedStudentDistribution", "This class GeneralizedStudentDistribution represents a non central\nStudent distribution which is also non standardized.\n\nA random variable :math:`W=\\sigma T + \\mu` is said to follow a\ngeneralized Student distribution if :math:`T` follows a non-central\ndistribution. The generalized Student distribution is an univariate\ncontinuous distribution. The support is the set of real values\n:math:`\\mathbb{R}`.\n\n", boost::python::no_init);
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def(boost::python::init<  >(""));
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def(boost::python::init< double const &, double const &, double const &, double const & >(""));
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def(boost::python::init< class ::statiskit::GeneralizedStudentDistribution const & >(""));
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_nb_parameters", method_pointer_3254d53aac3e56529641ace04eabef03, "Returns the number of parameters of the generalized Student distribution\n\nThe number of parameters of a generalized Student distribution is\n:math:`4` (:math:`\\mu`, :math:`\\sigma`, :math:`\nu` and :math:`\\delta`).\n\n:Return Type:\n    :cpp:any:`unsigned` int\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_mu", method_pointer_4ff040a6e2f356f9a5db0723b5094bd9, boost::python::return_value_policy< boost::python::return_by_value >(), "Get the value of the location parameter mu.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("set_mu", method_pointer_feeaf2ab063c5015b58521d4cfb5f66d, "Set the value of the location parameter mu.\n\n:Parameter:\n    `mu` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`void`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_sigma", method_pointer_c6421e0545bc57d3b191fb4f76ab7802, boost::python::return_value_policy< boost::python::return_by_value >(), "Get the value of the scale parameter sigma.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("set_sigma", method_pointer_30a93d7aada658fab8adbceb8dfba048, "Set the value of the scale parameter sigma.\n\n:Parameter:\n    `sigma` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`void`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_nu", method_pointer_468312cb3f5a5ec294ee2441d406363d, boost::python::return_value_policy< boost::python::return_by_value >(), "Get the value of the shape parameter nu.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("set_nu", method_pointer_fd6835a98dc8563380e04c09f2b012d0, "Set the value of the shape parameter nu.\n\n:Parameter:\n    `nu` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`void`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_delta", method_pointer_1a408c0e0c0158efa9ef5c40ae58379f, boost::python::return_value_policy< boost::python::return_by_value >(), "Get the value of the location parameter delta.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("set_delta", method_pointer_38a5fd66e638522c87111a72614cc78d, "Set the value of the location parameter delta.\n\n:Parameter:\n    `delta` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`void`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("ldf", method_pointer_5f3e0f2d46f954e08c69384bf1acfd8f, ":raw-latex:`\\copybrief `statiskit::ContinuousUnivariateDistribution::ldf()\n\n::\n\n     * \\details Let $x \\in \\mathbb{R} $ denote the value, the ldf is computed as\n     *          $$\n     *               \\ln f(x) = ,\n     *          $$\n     * where [$\\textnormal{beta}(a,b)$](http://www.boost.org/doc/libs/1_37_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_beta/beta_function.html) is the beta  function implemented in the Boost.Math library.\n     * \\param value The considered value $x$.\n\n:Parameter:\n    `value` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("pdf", method_pointer_b3cde7308b2b54578d094df85f8a4509, ":raw-latex:`\\copybrief `statiskit::ContinuousUnivariateDistribution::pdf()\n\n::\n\n     * \\details Let $x \\in \\mathbb{R} $ denote the value, the pdf is defined by\n     *          $$\n     *               f(x) =  \\displaystyle f(x)={\\frac {\nu ^{\\frac {\nu }{2}}\\Gamma (\nu +1)\\exp \\left(-{\\frac {\\mu ^{2}}{2}}\\right)}{2^{\nu }(\nu +x^{2})^{\\frac {\nu }{2}}\\Gamma ({\\frac {\nu }{2}})}}\\left\\{{\\sqrt {2}}\\mu x{\\frac {{}_{1}F_{1}\\left({\\frac {\nu }{2}}+1;\\,{\\frac {3}{2}};\\,{\\frac {\\mu ^{2}x^{2}}{2(\nu +x^{2})}}\\right)}{(\nu +x^{2})\\Gamma ({\\frac {\nu +1}{2}})}}+{\\frac {{}_{1}F_{1}\\left({\\frac {\nu +1}{2}};\\,{\\frac {1}{2}};\\,{\\frac {\\mu ^{2}x^{2}}{2(\nu +x^{2})}}\\right)}{{\\sqrt {\nu +x^{2}}}\\Gamma ({\\frac {\nu }{2}}+1)}}\\right\\},\n     *          $$\n     * and computed as\n     *          $$\n     *               f(x) =  \\left\\lbrace \\frac{\nu}{\nu+\\left( \\frac{x-\\mu}{\\sqrt{\nu}\\sigma}\\right)^2} \\right\\rbrace^{\\frac{1+\nu}{2}} \\Bigg/ \\left\\lbrace \\sqrt{\nu}\\sigma \\; \\textnormal{beta}(0.5\nu, \\; 0.5) \\right\\rbrace ,\n     *          $$      \n     * where [$\\textnormal{beta}(a,b)$](http://www.boost.org/doc/libs/1_37_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_beta/beta_function.html) is the beta  function implemented in the Boost.Math library.\n     * \\param value The considered value $x$.\n\n:Parameter:\n    `value` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("cdf", method_pointer_2dc0b9876ed154819af4ddaaaa4ec054, ":raw-latex:`\\copybrief `statiskit::ContinuousUnivariateDistribution::cdf()\n\n::\n\n     * \\details Let $x \\in \\mathbb{R} $ denote the value, the cdf is given by\n     *          $$\n     *               P(X \\leq x) = \\left\\{\n     *                              \\begin{array}{ll}\n     *                                 z & x \\leq \\mu, \\\\\n     *                                 1- z & x > \\mu,\n     *                              \\end{array}\n     *                              \\right.\n     *          $$\n     * where $ z $ is computed as\n     *          $$\n     *               z = \\left\\{\n     *                              \\begin{array}{ll}\n     *                               \\displaystyle 0.5 * \\textnormal{ibeta} \\left( 0.5 \nu, \\; 0.5, \\frac{\nu}{\nu+\\left( \\frac{x-\\mu}{\\sigma} \\right)^2} \\right) & \nu < 2 \\left( \\frac{x-\\mu}{\\sigma} \\right)^2 , \\\\\n     *                               \\displaystyle 0.5 * \\textnormal{ibetac} \\left( 0.5, \\; 0.5 \nu, \\frac{\\left( \\frac{x-\\mu}{\\sigma} \\right)^2}{\nu+\\left( \\frac{x-\\mu}{\\sigma} \\right)^2} \\right)   & \\textnormal{otherwise},\n     *                              \\end{array}\n     *                              \\right.\n     *          $$      \n     * where [$\\textnormal{ibeta}(a,b,x)$](http://www.boost.org/doc/libs/1_52_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_beta/ibeta_function.html) is the normalized incomplete beta function and [$\\textnormal{ibetac}(a,b,x)$](http://www.boost.org/doc/libs/1_52_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_beta/ibetac_function.html) is its complement, both implemented in the Boost.Math library.\n     * \\param value The considered value $x$.\n\n:Parameter:\n    `value` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("quantile", method_pointer_0ecce8b496d25ac9858d2514c9a8d07d, "| :raw-latex:`\\copybrief `statiskit::ContinuousUnivariateDistribution::quantile()\n  \\* The quantile for non-standardized Student distribution is computed\n  as \\*\n\n  .. math::\n\n\n         *                x = \\left\\{\n      *                              \\begin{array}{ll}\n      *                              \\displaystyle  \\mu - \\sigma \\left\\lbrace \nu \\frac{1-\\textnormal{ibeta\\_inv}(0.5 \nu, \\; 0.5, \\; 2p) }{\\textnormal{ibeta\\_inv}(0.5 \nu, \\; 0.5, \\; 2p) }  \\right\\rbrace^{0.5}  & p < 0.5, \\\\\n      *                                \\mu                        & p = 0.5, \\\\\n      *                               \\displaystyle  \\mu + \\sigma \\left\\lbrace \nu  \\frac{1-\\textnormal{ibeta\\_inv}(0.5 \nu, \\; 0.5, \\; 2-2p) }{\\textnormal{ibeta\\_inv}(0.5 \nu, \\; 0.5, \\; 2-2p) } \\right\\rbrace^{0.5}  & p > 0.5,\n      *                              \\end{array}\n      *                              \\right.\n         *           \n| \\* where\n  `:math:`\\textnormal{ibeta\\_inv}(a,b,x)` <http://www.boost.org/doc/libs/1_37_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_beta/ibeta_inv_function.html>`__\n  is the incomplete Beta function inverse implemented in the Boost.Math\n  library.\n\n:Parameter:\n    `p` (:cpp:any:`double`) - Undocumented\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("simulate", method_pointer_571aaf46ddea507db9dd6f30f1454fe0, "");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_mean", method_pointer_fd540daa26e25807990d1992581827fc, "Get the mean of non-standardized Student distribution $ E(X) =\n:raw-latex:`\\mu `$ if $ :raw-latex:`\nu `> 1 $ and undefined otherwise.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("get_variance", method_pointer_030a9d4a2f6059c18e6adc6679ba716b, "Get the variance of non-standardized Student distribution $ V(X) =\n:raw-latex:`\\frac{\nu}{\nu-2}` $ if $ :raw-latex:`\nu `>2 $, $ V(X) =\n:raw-latex:`\\infty `$ if $ 1 < :raw-latex:`\nu `:raw-latex:`\\leq `2$ and\nundefined otherwise.\n\n:Return Type:\n    :cpp:any:`double`\n\n");
    class_04fe81a388ca5c32b4f73fd41ae57c3f.def("copy", method_pointer_fa5bf3ce7fb35a92a77d8f5199de2318, "");

    if(autowig::Held< class ::statiskit::GeneralizedStudentDistribution >::is_class)
    {
        boost::python::implicitly_convertible< autowig::Held< class ::statiskit::GeneralizedStudentDistribution >::Type, autowig::Held< struct ::statiskit::ContinuousUnivariateDistribution >::Type >();
    }

}